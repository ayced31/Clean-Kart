// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  EMAIL
  SMS
  BOTH
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  phone         String?
  role          UserRole       @default(USER)
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  bookings      Booking[]
  notifications Notification[]

  @@map("users")
}

model Vendor {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  phone             String
  address           String
  description       String?
  servicesOffered   String[]  // Array of service IDs
  isApproved        Boolean   @default(false)
  rating            Float     @default(0.0)
  totalReviews      Int       @default(0)
  availableSlots    Json?     // JSON object for time slots
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  bookings          Booking[]

  @@map("vendors")
}

model Service {
  id            String    @id @default(uuid())
  name          String
  description   String
  category      String    // LAUNDRY, CLEANING, CAR_WASH
  basePrice     Float
  icon          String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bookings      Booking[]

  @@map("services")
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  vendorId      String
  serviceId     String
  slotDate      DateTime
  slotTime      String
  status        BookingStatus @default(PENDING)
  totalAmount   Float
  address       String
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  vendor        Vendor        @relation(fields: [vendorId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  payment       Payment?
  notifications Notification[]

  @@map("bookings")
}

model Payment {
  id                String        @id @default(uuid())
  bookingId         String        @unique
  amount            Float
  status            PaymentStatus @default(PENDING)
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  booking           Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  bookingId   String?
  message     String
  type        NotificationType
  isSent      Boolean          @default(false)
  sentAt      DateTime?
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id])
  booking     Booking?         @relation(fields: [bookingId], references: [id])

  @@map("notifications")
}
